package com.artsiomshshshsk.tictactoebackend.util;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Slf4j
@AllArgsConstructor
public class DebugController {

    private final CustomHealthIndicator customHealthIndicator;

    @GetMapping("/healthDown")
    public void setHealthDown() {
        customHealthIndicator.setHealthStatus("DOWN");
    }

    @GetMapping("/healthUp")
    public void setHealthUp() {
        customHealthIndicator.setHealthStatus("UP");
    }

    @GetMapping("/load-cpu")
    public String loadCpu() {
        log.info("CPU load request received. Generating CPU load...");
        int size = 1000; // Define the size of the matrix
        double[][] matrixA = generateRandomMatrix(size, size);
        double[][] matrixB = generateRandomMatrix(size, size);
        multiplyMatrices(matrixA, matrixB, size);
        return "CPU load is generated by performing big matrix multiplication";
    }

    private double[][] generateRandomMatrix(int rows, int cols) {
        double[][] matrix = new double[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = Math.random();
            }
        }
        return matrix;
    }

    private void multiplyMatrices(double[][] firstMatrix, double[][] secondMatrix, int size) {
        var result = new double[size][size];

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                for (int k = 0; k < size; k++) {
                    result[i][j] += firstMatrix[i][k] * secondMatrix[k][j];
                }
            }
        }

    }
}